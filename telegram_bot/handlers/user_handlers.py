from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram import Router, types, F
from aiogram.types import Message, CallbackQuery

from keyboards.user_keyboards import get_main_ikb, get_reg_ikb
from confige import BotConfig
from database import request as rq

router = Router()


@router.message(Command("dice"))
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")
    await message.delete()


@router.message(CommandStart())
async def cmd_start(message: types.Message, config: BotConfig, state: FSMContext):
    user_data = {
        "tg_id": message.from_user.id,
        "username": message.from_user.username,
        "name": message.from_user.first_name,
        "surname": message.from_user.last_name
    }
    await message.answer(
        text=config.welcome_message,
    )
    await rq.set_user(user_data['tg_id'],user_data)
    await message.answer(
        text='–ì–æ—Ç–æ–≤–æ!\n'
             '–í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ',
        reply_markup=get_main_ikb(user_data)
    )
    await state.clear()


@router.message(Command("admin_info"))
async def cmd_admin_info(message: types.Message, config: BotConfig):
    if message.from_user.id in config.admin_ids:
        await message.answer(text="You are an admin.")
    else:
        await message.answer("You are not an admin.")

    await message.delete()

# help
@router.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        text="üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n"
             "/dice - –∫–∏–Ω—É—Ç—å –∫—É–±–∏–∫ üé≤ \n"
             "/info - –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ \n"
             "/help - –ø–æ–º–æ—â—å \n"
             "/start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ —Å–ª—É—á–∞–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è,"
             " –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö \n"
        )
    await message.delete()


@router.message(Command("info"))
async def cmd_info(message: types.Message):
    await message.answer(
        text="üëæ–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!\n"
             "–û—Ç–ø—Ä–∞–≤–ª—è—è –¥–∞–Ω–Ω—ã–µ –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –Ω–∞ –∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É.\n"
             "–î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \n/feedback"
    )
    await message.delete()


@router.message(Command("feedback"))
async def cmd_feedback(message: types.Message):
    await message.answer(
        text="–î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: @yep_admin"
    )
    await message.delete()

@router.callback_query(F.data == "profile")
async def cmd_profile(callback: CallbackQuery):
    user = await rq.get_user(callback.from_user.id)
    user_data = user.to_dict()
    if user_data['user_login'] is None:
        await callback.message.answer(
            text="üîç <b>–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.</b>",
            reply_markup=get_reg_ikb()
        )
    else:
        await callback.message.answer(
            text=f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
                 f"–õ–æ–≥–∏–Ω: {user.user_login}\n",
            reply_markup=get_main_ikb()
        )